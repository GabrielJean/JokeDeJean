name: Build and Push Docker Image
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci


      - name: Debug Portainer containers list
        env:
          PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
          PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
        run: |
          curl -sSL -H "X-API-Key: $PORTAINER_API_KEY" "$PORTAINER_URL/api/endpoints/1/docker/containers/json?all=1" > response.json
          cat response.json
          jq . response.json || true

# - name: Debug Portainer containers list
#   env:
#     PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
#     PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
#   run: |
#     curl -sSL -H "X-API-Key: $PORTAINER_API_KEY" "$PORTAINER_URL/api/endpoints/1/docker/containers/json?all=1" > response.json
#     cat response.json
#     jq . response.json || true
#       # - name: Build and push Docker image (classic)
#       #   run: |
#       #     echo "${{ secrets.GITEA_REGISTRY_PASS }}" | docker login gitea.docker-1.gwebs.ca -u "${{ secrets.GITEA_REGISTRY_USER }}" --password-stdin
#       #     docker build -t gitea.docker-1.gwebs.ca/gabriel/jokedejean:latest .
#       #     docker push gitea.docker-1.gwebs.ca/gabriel/jokedejean:latest

#       # - name: Restart container in Portainer
#       #   env:
#       #     PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
#       #     PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
#       #     CONTAINER_NAME: jokedejean
#       #   run: |
#       #     set -e
#       #     # Find ID
#       #     container_id=$(curl -sSL -H "X-API-Key: $PORTAINER_API_KEY" \
#       #       "$PORTAINER_URL/api/endpoints/1/docker/containers/json?all=1" | \
#       #       jq -r '.[] | select(.Names[] | contains("/'"$CONTAINER_NAME"'")) | .Id')
#       #     echo "Container ID: $container_id"
#       #     if [ -z "$container_id" ]; then
#       #       echo "Container $CONTAINER_NAME not found!"
#       #       exit 1
#       #     fi
#       #     # Find image name and repull (optional but recommended)
#       #     image_name=$(curl -sSL -H "X-API-Key: $PORTAINER_API_KEY" "$PORTAINER_URL/api/endpoints/1/docker/containers/$container_id/json" | jq -r '.Config.Image')
#       #     echo "Container uses image: $image_name"
#       #     echo "Pulling latest image (if any)..."
#       #     curl -sSL -X POST -H "X-API-Key: $PORTAINER_API_KEY" \
#       #       "$PORTAINER_URL/api/endpoints/1/docker/images/create?fromImage=$image_name&tag=latest"
#       #     # Restart the container
#       #     echo "Restarting container..."
#       #     curl -X POST -H "X-API-Key: $PORTAINER_API_KEY" \
#       #       "$PORTAINER_URL/api/endpoints/1/docker/containers/$container_id/restart"